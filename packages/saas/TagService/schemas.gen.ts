// This file is auto-generated by @hey-api/openapi-ts

export const $PagedResultDto_TagListItemDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['exportValidationExpirationDate', 'id', 'issueDate', 'status', 'tagNumber', 'travellerDocumentNumber'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    tagNumber: {
                        minLength: 1,
                        type: 'string'
                    },
                    issueDate: {
                        type: 'string',
                        format: 'date-time'
                    },
                    exportValidationExpirationDate: {
                        type: 'string',
                        format: 'date-time'
                    },
                    refundExpirationDate: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    isEarlyRefunded: {
                        type: 'boolean',
                        nullable: true
                    },
                    travellerFullName: {
                        type: 'string',
                        nullable: true
                    },
                    travellerDocumentId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    travellerDocumentNumber: {
                        minLength: 1,
                        type: 'string'
                    },
                    merchantTitle: {
                        type: 'string',
                        nullable: true
                    },
                    status: {
                        enum: ['None', 'Open', 'PreIssued', 'Issued', 'WaitingGoodsValidation', 'WaitingStampValidation', 'Declined', 'ExportValidated', 'PaymentBlocked', 'PaymentInProgress', 'PaymentProblem', 'Paid', 'Cancelled', 'Expired', 'Correction', 'OptedOut', 'EarlyPaid'],
                        type: 'string'
                    },
                    expirationReason: {
                        enum: ['ExportValidationExpirationDate', 'RefundExpirationDate', 'EarlyRefundExpirationDate'],
                        type: 'string'
                    },
                    currency: {
                        type: 'string',
                        nullable: true
                    },
                    currencyRate: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    salesAmount: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    vatAmount: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    grossRefund: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    refundFee: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    agentRefundFee: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    refund: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    earlyRefundFee: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $TagListResponseDto_TagListItemDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['exportValidationExpirationDate', 'id', 'issueDate', 'status', 'tagNumber', 'travellerDocumentNumber'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    tagNumber: {
                        minLength: 1,
                        type: 'string'
                    },
                    issueDate: {
                        type: 'string',
                        format: 'date-time'
                    },
                    exportValidationExpirationDate: {
                        type: 'string',
                        format: 'date-time'
                    },
                    refundExpirationDate: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    isEarlyRefunded: {
                        type: 'boolean',
                        nullable: true
                    },
                    travellerFullName: {
                        type: 'string',
                        nullable: true
                    },
                    travellerDocumentId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    travellerDocumentNumber: {
                        minLength: 1,
                        type: 'string'
                    },
                    merchantTitle: {
                        type: 'string',
                        nullable: true
                    },
                    status: {
                        enum: ['None', 'Open', 'PreIssued', 'Issued', 'WaitingGoodsValidation', 'WaitingStampValidation', 'Declined', 'ExportValidated', 'PaymentBlocked', 'PaymentInProgress', 'PaymentProblem', 'Paid', 'Cancelled', 'Expired', 'Correction', 'OptedOut', 'EarlyPaid'],
                        type: 'string'
                    },
                    expirationReason: {
                        enum: ['ExportValidationExpirationDate', 'RefundExpirationDate', 'EarlyRefundExpirationDate'],
                        type: 'string'
                    },
                    currency: {
                        type: 'string',
                        nullable: true
                    },
                    currencyRate: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    salesAmount: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    vatAmount: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    grossRefund: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    refundFee: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    agentRefundFee: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    refund: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    earlyRefundFee: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Addresses_AddressDto = {
    required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        partyType: {
            enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
            type: 'string'
        },
        partyId: {
            type: 'string',
            format: 'uuid'
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        adminAreaLevel1Id: {
            type: 'string',
            format: 'uuid'
        },
        adminAreaLevel2Id: {
            type: 'string',
            format: 'uuid'
        },
        neighborhoodId: {
            type: 'string',
            format: 'uuid'
        },
        addressLine: {
            minLength: 1,
            type: 'string'
        },
        postalCode: {
            type: 'string',
            nullable: true
        },
        type: {
            enum: ['UNKNOWN', 'HOME', 'WORK'],
            type: 'string'
        },
        placeId: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        isPrimary: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_CRMService_Addresses_AddressType = {
    enum: ['UNKNOWN', 'HOME', 'WORK'],
    type: 'string'
} as const;

export const $UniRefund_CRMService_Merchants_MerchantInfoForTagDto = {
    required: ['address', 'name', 'productGroups'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            minLength: 1,
            type: 'string',
            description: 'The **business name** of the merchant. This is the official trading name.'
        },
        address: {
            required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                partyType: {
                    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                    type: 'string'
                },
                partyId: {
                    type: 'string',
                    format: 'uuid'
                },
                countryId: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel1Id: {
                    type: 'string',
                    format: 'uuid'
                },
                adminAreaLevel2Id: {
                    type: 'string',
                    format: 'uuid'
                },
                neighborhoodId: {
                    type: 'string',
                    format: 'uuid'
                },
                addressLine: {
                    minLength: 1,
                    type: 'string'
                },
                postalCode: {
                    type: 'string',
                    nullable: true
                },
                type: {
                    enum: ['UNKNOWN', 'HOME', 'WORK'],
                    type: 'string'
                },
                placeId: {
                    type: 'string',
                    nullable: true
                },
                latitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                longitude: {
                    type: 'number',
                    format: 'float',
                    nullable: true
                },
                isPrimary: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        productGroups: {
            type: 'array',
            items: {
                required: ['active', 'articleCode', 'companyType', 'food', 'name', 'unitCode'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    articleCode: {
                        minLength: 1,
                        type: 'string',
                        description: 'The unique article code for the product group. This field is **required**.'
                    },
                    name: {
                        minLength: 1,
                        type: 'string',
                        description: 'The name of the product group (e.g., "Electronics", "Apparel"). This field is **required**.'
                    },
                    unitCode: {
                        enum: ['QNT', 'BAG', 'BOX'],
                        type: 'string'
                    },
                    companyType: {
                        enum: ['GOVERNMENT', 'TAXFREE', 'CUSTOMS', 'REFUNDPOINT', 'MERCHANT', 'EXCHANGE', 'TOURGUIDE'],
                        type: 'string'
                    },
                    vatId: {
                        type: 'string',
                        description: 'The unique identifier for the VAT (Value Added Tax) category applicable to this product group.',
                        format: 'uuid'
                    },
                    vatPercent: {
                        type: 'integer',
                        description: 'The percentage of VAT applied to products in this group, if applicable.',
                        format: 'int32',
                        nullable: true
                    },
                    active: {
                        type: 'boolean',
                        description: 'Indicates whether the product group is currently active. This field is **required**.'
                    },
                    food: {
                        type: 'boolean',
                        description: 'Indicates whether the product group consists of food items. This field is **required**.'
                    }
                },
                additionalProperties: false,
                description: 'Represents a group of products with common characteristics, used for categorization and tax purposes.'
            },
            description: `A list of **product groups** that this merchant sells,
relevant for tax-free eligibility categorization.`
        }
    },
    additionalProperties: false,
    description: `Represents the detailed business information for a merchant within the tax-free system.
This DTO is used for transferring and displaying core merchant data.`
} as const;

export const $UniRefund_ContractService_Enums_RefundMethod = {
    enum: ['Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner', 'IbanTransfer'],
    type: 'string'
} as const;

export const $UniRefund_ExportValidationService_ExportValidations_ExportValidationDetailDto = {
    required: ['customsId', 'customsName', 'exportDate'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tagId: {
            type: 'string',
            description: 'The unique identifier of the tax-free tag associated with the export.',
            format: 'uuid',
            nullable: true
        },
        tagNumber: {
            type: 'string',
            description: 'The readable number or code of the tax-free tag.',
            nullable: true
        },
        customsId: {
            type: 'string',
            description: `The unique identifier of the customs office where the export validation occurred.
This field is **required**.`,
            format: 'uuid'
        },
        customsName: {
            minLength: 1,
            type: 'string',
            description: `The name of the customs office where the export validation occurred.
This field is **required**.`
        },
        referenceId: {
            type: 'string',
            description: 'An optional reference ID for the export validation, possibly from an external system.',
            nullable: true
        },
        exportDate: {
            type: 'string',
            description: `The date and time when the export validation was performed.
This field is **required**.`,
            format: 'date-time'
        },
        status: {
            enum: ['None', 'Waiting', 'Approved', 'Rejected', 'Expired'],
            type: 'string'
        },
        stampType: {
            enum: ['None', 'Integration', 'DigitalStamp'],
            type: 'string'
        },
        initialValidationResult: {
            enum: ['None', 'Green'],
            type: 'string'
        },
        finalValidationResult: {
            enum: ['None', 'Green'],
            type: 'string'
        }
    },
    additionalProperties: false,
    description: `Represents the details of an export validation process for a tax-free transaction.
This DTO captures information related to customs verification of exported goods.`
} as const;

export const $UniRefund_ExportValidationService_ExportValidations_ExportValidationDto = {
    required: ['customsId', 'customsName', 'exportDate'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tagId: {
            type: 'string',
            description: 'The unique identifier of the tax-free tag associated with the export.',
            format: 'uuid',
            nullable: true
        },
        tagNumber: {
            type: 'string',
            description: 'The readable number or code of the tax-free tag.',
            nullable: true
        },
        customsId: {
            type: 'string',
            description: `The unique identifier of the customs office where the export validation occurred.
This field is **required**.`,
            format: 'uuid'
        },
        customsName: {
            minLength: 1,
            type: 'string',
            description: `The name of the customs office where the export validation occurred.
This field is **required**.`
        },
        exportDate: {
            type: 'string',
            description: `The date and time when the export validation was performed.
This field is **required**.`,
            format: 'date-time'
        },
        referenceId: {
            type: 'string',
            description: 'An optional reference ID for the export validation, possibly from an external system.',
            nullable: true
        },
        status: {
            enum: ['None', 'Waiting', 'Approved', 'Rejected', 'Expired'],
            type: 'string'
        },
        stampType: {
            enum: ['None', 'Integration', 'DigitalStamp'],
            type: 'string'
        },
        initialValidationResult: {
            enum: ['None', 'Green'],
            type: 'string'
        },
        finalValidationResult: {
            enum: ['None', 'Green'],
            type: 'string'
        }
    },
    additionalProperties: false,
    description: `Represents the details of an export validation process for a tax-free transaction.
This DTO captures information related to customs verification of exported goods.`
} as const;

export const $UniRefund_ExportValidationService_ExportValidations_ExportValidationStatusCode = {
    enum: ['None', 'Waiting', 'Approved', 'Rejected', 'Expired'],
    type: 'string'
} as const;

export const $UniRefund_ExportValidationService_ExportValidations_StampTypeCode = {
    enum: ['None', 'Integration', 'DigitalStamp'],
    type: 'string'
} as const;

export const $UniRefund_ExportValidationService_ExportValidations_ValidationResult = {
    enum: ['None', 'Green'],
    type: 'string'
} as const;

export const $UniRefund_SettingService_ProductGroups_CompanyTypeCode = {
    enum: ['GOVERNMENT', 'TAXFREE', 'CUSTOMS', 'REFUNDPOINT', 'MERCHANT', 'EXCHANGE', 'TOURGUIDE'],
    type: 'string'
} as const;

export const $UniRefund_SettingService_ProductGroups_ProductGroupDto = {
    required: ['active', 'articleCode', 'companyType', 'food', 'name', 'unitCode'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        articleCode: {
            minLength: 1,
            type: 'string',
            description: 'The unique article code for the product group. This field is **required**.'
        },
        name: {
            minLength: 1,
            type: 'string',
            description: 'The name of the product group (e.g., "Electronics", "Apparel"). This field is **required**.'
        },
        unitCode: {
            enum: ['QNT', 'BAG', 'BOX'],
            type: 'string'
        },
        companyType: {
            enum: ['GOVERNMENT', 'TAXFREE', 'CUSTOMS', 'REFUNDPOINT', 'MERCHANT', 'EXCHANGE', 'TOURGUIDE'],
            type: 'string'
        },
        vatId: {
            type: 'string',
            description: 'The unique identifier for the VAT (Value Added Tax) category applicable to this product group.',
            format: 'uuid'
        },
        vatPercent: {
            type: 'integer',
            description: 'The percentage of VAT applied to products in this group, if applicable.',
            format: 'int32',
            nullable: true
        },
        active: {
            type: 'boolean',
            description: 'Indicates whether the product group is currently active. This field is **required**.'
        },
        food: {
            type: 'boolean',
            description: 'Indicates whether the product group consists of food items. This field is **required**.'
        }
    },
    additionalProperties: false,
    description: 'Represents a group of products with common characteristics, used for categorization and tax purposes.'
} as const;

export const $UniRefund_SettingService_ProductGroups_UnitTypeCode = {
    enum: ['QNT', 'BAG', 'BOX'],
    type: 'string'
} as const;

export const $UniRefund_Shared_Contracts_Enums_PartyType = {
    enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
    type: 'string'
} as const;

export const $UniRefund_TagService_Invoices_InvoiceDto = {
    required: ['invoiceLines', 'issueDate', 'totalAmount', 'vatAmount'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        number: {
            type: 'string',
            description: 'The unique identifying number of the invoice.',
            nullable: true
        },
        issueDate: {
            type: 'string',
            description: 'The date when the invoice was issued. This field is **required**.',
            format: 'date-time'
        },
        totalAmount: {
            type: 'number',
            description: 'The total monetary amount of the invoice, including VAT. This field is **required**.',
            format: 'double'
        },
        vatAmount: {
            type: 'number',
            description: 'The Value Added Tax (VAT) amount included in the invoice. This field is **required**.',
            format: 'double'
        },
        currency: {
            type: 'string',
            description: 'The currency in which the invoice amounts are denominated (e.g., "EUR", "USD").',
            nullable: true
        },
        invoiceLines: {
            type: 'array',
            items: {
                required: ['amount', 'taxAmount', 'taxBase', 'taxRate'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    productGroup: {
                        required: ['active', 'articleCode', 'companyType', 'food', 'name', 'unitCode'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            articleCode: {
                                minLength: 1,
                                type: 'string',
                                description: 'The unique article code for the product group. This field is **required**.'
                            },
                            name: {
                                minLength: 1,
                                type: 'string',
                                description: 'The name of the product group (e.g., "Electronics", "Apparel"). This field is **required**.'
                            },
                            unitCode: {
                                enum: ['QNT', 'BAG', 'BOX'],
                                type: 'string'
                            },
                            companyType: {
                                enum: ['GOVERNMENT', 'TAXFREE', 'CUSTOMS', 'REFUNDPOINT', 'MERCHANT', 'EXCHANGE', 'TOURGUIDE'],
                                type: 'string'
                            },
                            vatId: {
                                type: 'string',
                                description: 'The unique identifier for the VAT (Value Added Tax) category applicable to this product group.',
                                format: 'uuid'
                            },
                            vatPercent: {
                                type: 'integer',
                                description: 'The percentage of VAT applied to products in this group, if applicable.',
                                format: 'int32',
                                nullable: true
                            },
                            active: {
                                type: 'boolean',
                                description: 'Indicates whether the product group is currently active. This field is **required**.'
                            },
                            food: {
                                type: 'boolean',
                                description: 'Indicates whether the product group consists of food items. This field is **required**.'
                            }
                        },
                        additionalProperties: false,
                        description: 'Represents a group of products with common characteristics, used for categorization and tax purposes.'
                    },
                    description: {
                        type: 'string',
                        description: `A description of the item in this invoice line (e.g., "Men's Leather Jacket," "Designer Watch").`,
                        nullable: true
                    },
                    amount: {
                        type: 'number',
                        description: 'The total monetary amount for this specific line item, including tax. This field is **required**.',
                        format: 'double'
                    },
                    taxRate: {
                        type: 'number',
                        description: 'The tax rate applied to this line item, expressed as a decimal (e.g., 0.18 for 18%). This field is **required**.',
                        format: 'double'
                    },
                    taxAmount: {
                        type: 'number',
                        description: 'The calculated tax amount for this line item. This field is **required**.',
                        format: 'double'
                    },
                    taxBase: {
                        type: 'number',
                        description: 'The base amount before tax for this line item. This field is **required**.',
                        format: 'double'
                    },
                    currency: {
                        type: 'string',
                        description: "The currency in which this line item's amounts are denominated.",
                        nullable: true
                    }
                },
                additionalProperties: false,
                description: `Represents a single line item within an invoice.
This DTO details a specific product or service and its associated financial breakdown.`
            },
            description: 'A collection of individual line items included in this invoice.'
        }
    },
    additionalProperties: false,
    description: `Represents an invoice within the tax-free system.
This DTO captures key financial details of a purchase eligible for tax refunds.`
} as const;

export const $UniRefund_TagService_Invoices_InvoiceLineDto = {
    required: ['amount', 'taxAmount', 'taxBase', 'taxRate'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        productGroup: {
            required: ['active', 'articleCode', 'companyType', 'food', 'name', 'unitCode'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                articleCode: {
                    minLength: 1,
                    type: 'string',
                    description: 'The unique article code for the product group. This field is **required**.'
                },
                name: {
                    minLength: 1,
                    type: 'string',
                    description: 'The name of the product group (e.g., "Electronics", "Apparel"). This field is **required**.'
                },
                unitCode: {
                    enum: ['QNT', 'BAG', 'BOX'],
                    type: 'string'
                },
                companyType: {
                    enum: ['GOVERNMENT', 'TAXFREE', 'CUSTOMS', 'REFUNDPOINT', 'MERCHANT', 'EXCHANGE', 'TOURGUIDE'],
                    type: 'string'
                },
                vatId: {
                    type: 'string',
                    description: 'The unique identifier for the VAT (Value Added Tax) category applicable to this product group.',
                    format: 'uuid'
                },
                vatPercent: {
                    type: 'integer',
                    description: 'The percentage of VAT applied to products in this group, if applicable.',
                    format: 'int32',
                    nullable: true
                },
                active: {
                    type: 'boolean',
                    description: 'Indicates whether the product group is currently active. This field is **required**.'
                },
                food: {
                    type: 'boolean',
                    description: 'Indicates whether the product group consists of food items. This field is **required**.'
                }
            },
            additionalProperties: false,
            description: 'Represents a group of products with common characteristics, used for categorization and tax purposes.'
        },
        description: {
            type: 'string',
            description: `A description of the item in this invoice line (e.g., "Men's Leather Jacket," "Designer Watch").`,
            nullable: true
        },
        amount: {
            type: 'number',
            description: 'The total monetary amount for this specific line item, including tax. This field is **required**.',
            format: 'double'
        },
        taxRate: {
            type: 'number',
            description: 'The tax rate applied to this line item, expressed as a decimal (e.g., 0.18 for 18%). This field is **required**.',
            format: 'double'
        },
        taxAmount: {
            type: 'number',
            description: 'The calculated tax amount for this line item. This field is **required**.',
            format: 'double'
        },
        taxBase: {
            type: 'number',
            description: 'The base amount before tax for this line item. This field is **required**.',
            format: 'double'
        },
        currency: {
            type: 'string',
            description: "The currency in which this line item's amounts are denominated.",
            nullable: true
        }
    },
    additionalProperties: false,
    description: `Represents a single line item within an invoice.
This DTO details a specific product or service and its associated financial breakdown.`
} as const;

export const $UniRefund_TagService_Invoices_InvoiceRequestDto = {
    required: ['invoiceLines', 'issueDate', 'totalAmount', 'uuid', 'vatAmount'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'The unique identifier of the invoice (optional for creation).',
            format: 'uuid',
            nullable: true
        },
        uuid: {
            type: 'string',
            description: `The globally unique identifier (UUID) of the invoice.
Required for invoice tracking and referencing.`,
            format: 'uuid'
        },
        invoiceNumber: {
            type: 'string',
            description: `The invoice number as issued by the merchant or system.
Optional field for external reference.`,
            nullable: true
        },
        issueDate: {
            type: 'string',
            description: `The date when the invoice was issued.
Required for financial and legal records.`,
            format: 'date-time'
        },
        totalAmount: {
            type: 'number',
            description: `The total gross amount of the invoice, including VAT.
Required for payment and tax calculations.`,
            format: 'double'
        },
        vatAmount: {
            type: 'number',
            description: `The total VAT (Value Added Tax) amount included in the invoice.
Required for tax reporting.`,
            format: 'double'
        },
        invoiceLines: {
            type: 'array',
            items: {
                required: ['amount', 'taxAmount', 'taxBase', 'taxRate'],
                type: 'object',
                properties: {
                    taxRate: {
                        type: 'number',
                        format: 'double'
                    },
                    taxAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    amount: {
                        type: 'number',
                        format: 'double'
                    },
                    taxBase: {
                        type: 'number',
                        format: 'double'
                    },
                    productGroupId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            description: `The list of individual invoice line items detailing the products or services provided.
Required for itemized billing and calculations.`
        }
    },
    additionalProperties: false,
    description: 'Represents the data required to create or update an invoice.'
} as const;

export const $UniRefund_TagService_Merchants_MerchantRequestDto = {
    required: ['countryCode', 'externalIdentifier', 'vatNumber'],
    type: 'object',
    properties: {
        vatNumber: {
            minLength: 1,
            type: 'string',
            description: `The merchant's official VAT (Value Added Tax) number as registered in the relevant country.
This number is used for tax reporting and legal identification of the business.`
        },
        countryCode: {
            minLength: 1,
            type: 'string',
            description: `ISO 3166-1 alpha-2 country code where the merchant is registered (e.g., "DE" for Germany, "TR" for Turkey).
Determines jurisdiction for tax and regulatory purposes.`
        },
        externalIdentifier: {
            maxLength: 15,
            minLength: 1,
            type: 'string',
            description: `Unique identifier of the merchant's branch or store within the organization.
Used to distinguish between different locations or subdivisions of the same merchant.`
        }
    },
    additionalProperties: false,
    description: 'Data transfer object for merchant registration or update requests.'
} as const;

export const $UniRefund_TagService_Tags_CreateTagRequestDto = {
    required: ['invoices', 'merchant', 'traveller'],
    type: 'object',
    properties: {
        merchant: {
            required: ['countryCode', 'externalIdentifier', 'vatNumber'],
            type: 'object',
            properties: {
                vatNumber: {
                    minLength: 1,
                    type: 'string',
                    description: `The merchant's official VAT (Value Added Tax) number as registered in the relevant country.
This number is used for tax reporting and legal identification of the business.`
                },
                countryCode: {
                    minLength: 1,
                    type: 'string',
                    description: `ISO 3166-1 alpha-2 country code where the merchant is registered (e.g., "DE" for Germany, "TR" for Turkey).
Determines jurisdiction for tax and regulatory purposes.`
                },
                externalIdentifier: {
                    maxLength: 15,
                    minLength: 1,
                    type: 'string',
                    description: `Unique identifier of the merchant's branch or store within the organization.
Used to distinguish between different locations or subdivisions of the same merchant.`
                }
            },
            additionalProperties: false,
            description: 'Data transfer object for merchant registration or update requests.'
        },
        traveller: {
            required: ['firstName', 'lastName', 'nationalityCountryCode2', 'residenceCountryCode2', 'travellerDocumentNumber'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'The unique identifier of the traveller (optional for creation).',
                    format: 'uuid',
                    nullable: true
                },
                travellerDocumentNumber: {
                    minLength: 1,
                    type: 'string',
                    description: `The travel document number (such as passport number) of the traveller.
Required for identification and document verification.`
                },
                nationalityCountryCode2: {
                    minLength: 1,
                    type: 'string',
                    description: `The ISO 3166-1 alpha-2 country code representing the traveller's nationality (e.g., "TR" for Turkey).`
                },
                firstName: {
                    minLength: 1,
                    type: 'string',
                    description: 'The first name or given name of the traveller.'
                },
                lastName: {
                    minLength: 1,
                    type: 'string',
                    description: 'The last name or surname of the traveller.'
                },
                residenceCountryCode2: {
                    minLength: 1,
                    type: 'string',
                    description: "The ISO 3166-1 alpha-2 country code representing the traveller's country of residence."
                },
                expirationDate: {
                    type: 'string',
                    description: 'The expiration date of the travel document (optional).',
                    format: 'date-time',
                    nullable: true
                },
                birthDate: {
                    type: 'string',
                    description: 'The birth date of the traveller (optional).',
                    format: 'date-time',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        invoices: {
            type: 'array',
            items: {
                required: ['invoiceLines', 'issueDate', 'totalAmount', 'uuid', 'vatAmount'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'The unique identifier of the invoice (optional for creation).',
                        format: 'uuid',
                        nullable: true
                    },
                    uuid: {
                        type: 'string',
                        description: `The globally unique identifier (UUID) of the invoice.
Required for invoice tracking and referencing.`,
                        format: 'uuid'
                    },
                    invoiceNumber: {
                        type: 'string',
                        description: `The invoice number as issued by the merchant or system.
Optional field for external reference.`,
                        nullable: true
                    },
                    issueDate: {
                        type: 'string',
                        description: `The date when the invoice was issued.
Required for financial and legal records.`,
                        format: 'date-time'
                    },
                    totalAmount: {
                        type: 'number',
                        description: `The total gross amount of the invoice, including VAT.
Required for payment and tax calculations.`,
                        format: 'double'
                    },
                    vatAmount: {
                        type: 'number',
                        description: `The total VAT (Value Added Tax) amount included in the invoice.
Required for tax reporting.`,
                        format: 'double'
                    },
                    invoiceLines: {
                        type: 'array',
                        items: {
                            required: ['amount', 'taxAmount', 'taxBase', 'taxRate'],
                            type: 'object',
                            properties: {
                                taxRate: {
                                    type: 'number',
                                    format: 'double'
                                },
                                taxAmount: {
                                    type: 'number',
                                    format: 'double'
                                },
                                amount: {
                                    type: 'number',
                                    format: 'double'
                                },
                                taxBase: {
                                    type: 'number',
                                    format: 'double'
                                },
                                productGroupId: {
                                    type: 'string',
                                    format: 'uuid',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        description: `The list of individual invoice line items detailing the products or services provided.
Required for itemized billing and calculations.`
                    }
                },
                additionalProperties: false,
                description: 'Represents the data required to create or update an invoice.'
            },
            description: 'A collection of invoices linked to this tag.'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_EarningType = {
    enum: ['None', 'GrossComission', 'RedefinedGC', 'Rebate', 'NetComission'],
    type: 'string'
} as const;

export const $UniRefund_TagService_Tags_ExpirationReason = {
    enum: ['ExportValidationExpirationDate', 'RefundExpirationDate', 'EarlyRefundExpirationDate'],
    type: 'string'
} as const;

export const $UniRefund_TagService_Tags_ExportValidationRequestDto = {
    required: ['customsId', 'exportDate', 'referenceId', 'responseCode'],
    type: 'object',
    properties: {
        exportDate: {
            type: 'string',
            format: 'date-time'
        },
        customsId: {
            type: 'string',
            format: 'uuid'
        },
        referenceId: {
            minLength: 1,
            type: 'string'
        },
        responseCode: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_InvoiceLineRequestDto = {
    required: ['amount', 'taxAmount', 'taxBase', 'taxRate'],
    type: 'object',
    properties: {
        taxRate: {
            type: 'number',
            format: 'double'
        },
        taxAmount: {
            type: 'number',
            format: 'double'
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        taxBase: {
            type: 'number',
            format: 'double'
        },
        productGroupId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_RebateStatementByVATStatementDto = {
    type: 'object',
    properties: {
        vatStatementHeaderId: {
            type: 'string',
            format: 'uuid'
        },
        rebateStatementPropertiesByMerchantIds: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    merchantId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    tagCount: {
                        type: 'integer',
                        format: 'int32'
                    },
                    rebateAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    grandTotalAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    vatAmount: {
                        type: 'number',
                        format: 'double'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_RebateStatementPropertiesByMerchantIdsDto = {
    type: 'object',
    properties: {
        merchantId: {
            type: 'string',
            format: 'uuid'
        },
        tagCount: {
            type: 'integer',
            format: 'int32'
        },
        rebateAmount: {
            type: 'number',
            format: 'double'
        },
        grandTotalAmount: {
            type: 'number',
            format: 'double'
        },
        vatAmount: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_SetTagRefundRequestDto = {
    type: 'object',
    properties: {
        tagRefunds: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    refundAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    refundCurrency: {
                        type: 'string',
                        nullable: true
                    },
                    refundRate: {
                        type: 'number',
                        format: 'double'
                    },
                    travellerFeeAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    agentFeeAmount: {
                        type: 'number',
                        format: 'double'
                    },
                    earlyRefundFeeAmount: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        refundId: {
            type: 'string',
            format: 'uuid'
        },
        refundType: {
            enum: ['Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner', 'IbanTransfer'],
            type: 'string'
        },
        refundDate: {
            type: 'string',
            format: 'date-time'
        },
        status: {
            enum: ['None', 'Open', 'PreIssued', 'Issued', 'WaitingGoodsValidation', 'WaitingStampValidation', 'Declined', 'ExportValidated', 'PaymentBlocked', 'PaymentInProgress', 'PaymentProblem', 'Paid', 'Cancelled', 'Expired', 'Correction', 'OptedOut', 'EarlyPaid'],
            type: 'string'
        },
        refundPointId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_SetTagRefundRequestItemDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        refundAmount: {
            type: 'number',
            format: 'double'
        },
        refundCurrency: {
            type: 'string',
            nullable: true
        },
        refundRate: {
            type: 'number',
            format: 'double'
        },
        travellerFeeAmount: {
            type: 'number',
            format: 'double'
        },
        agentFeeAmount: {
            type: 'number',
            format: 'double'
        },
        earlyRefundFeeAmount: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_SetTagRefundResponseDto = {
    type: 'object',
    properties: {
        earlyRefundExpiryDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_SetTagVATStatementHeaderIdRequestDto = {
    type: 'object',
    properties: {
        tagIdAndVATStatementHeaderIdPairs: {
            type: 'array',
            items: {
                required: ['tagId', 'vatStatementHeaderId'],
                type: 'object',
                properties: {
                    tagId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    vatStatementHeaderId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_TagCancelRequestDto = {
    type: 'object',
    properties: {
        merchantVatNumber: {
            type: 'string',
            nullable: true
        },
        merchantCountryCode: {
            type: 'string',
            nullable: true
        },
        merchantBranchId: {
            type: 'string',
            nullable: true
        },
        receiptNumber: {
            type: 'string',
            nullable: true
        },
        invoiceUUID: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tagId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_TagCancelResponseDto = {
    required: ['id', 'refundAmount', 'status', 'tagNumber'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        tagNumber: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier number of the tag.'
        },
        status: {
            enum: ['None', 'Open', 'PreIssued', 'Issued', 'WaitingGoodsValidation', 'WaitingStampValidation', 'Declined', 'ExportValidated', 'PaymentBlocked', 'PaymentInProgress', 'PaymentProblem', 'Paid', 'Cancelled', 'Expired', 'Correction', 'OptedOut', 'EarlyPaid'],
            type: 'string'
        },
        refundAmount: {
            type: 'number',
            description: 'The calculated amount to be refunded for the tag.',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_TagDetailDto = {
    required: ['exportValidationExpirationDate', 'issueDate', 'status', 'tagNumber'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tagNumber: {
            minLength: 1,
            type: 'string',
            description: 'Unique identifier number of the tag.'
        },
        status: {
            enum: ['None', 'Open', 'PreIssued', 'Issued', 'WaitingGoodsValidation', 'WaitingStampValidation', 'Declined', 'ExportValidated', 'PaymentBlocked', 'PaymentInProgress', 'PaymentProblem', 'Paid', 'Cancelled', 'Expired', 'Correction', 'OptedOut', 'EarlyPaid'],
            type: 'string'
        },
        expirationReason: {
            enum: ['ExportValidationExpirationDate', 'RefundExpirationDate', 'EarlyRefundExpirationDate'],
            type: 'string'
        },
        refundType: {
            enum: ['Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner', 'IbanTransfer'],
            type: 'string'
        },
        isEarlyRefunded: {
            type: 'boolean',
            description: 'Indicates if the tag was refunded earlier than usual.',
            nullable: true
        },
        issueDate: {
            type: 'string',
            description: 'The date when the tag was initially issued.',
            format: 'date-time'
        },
        exportValidationExpirationDate: {
            type: 'string',
            description: 'The expiration date for export validation associated with the tag.',
            format: 'date-time'
        },
        refundExpirationDate: {
            type: 'string',
            description: 'The expiration date by which a refund can be claimed, if applicable.',
            format: 'date-time',
            nullable: true
        },
        merchant: {
            required: ['address', 'name', 'productGroups'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                name: {
                    minLength: 1,
                    type: 'string',
                    description: 'The **business name** of the merchant. This is the official trading name.'
                },
                address: {
                    required: ['addressLine', 'adminAreaLevel1Id', 'adminAreaLevel2Id', 'countryId', 'isPrimary', 'neighborhoodId', 'partyId', 'partyType', 'type'],
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            format: 'uuid'
                        },
                        partyType: {
                            enum: ['INDIVIDUAL', 'MERCHANT', 'REFUNDPOINT', 'CUSTOM', 'TAXFREE', 'TAXOFFICE', 'TOURGUIDE', 'TRAVELLER'],
                            type: 'string'
                        },
                        partyId: {
                            type: 'string',
                            format: 'uuid'
                        },
                        countryId: {
                            type: 'string',
                            format: 'uuid'
                        },
                        adminAreaLevel1Id: {
                            type: 'string',
                            format: 'uuid'
                        },
                        adminAreaLevel2Id: {
                            type: 'string',
                            format: 'uuid'
                        },
                        neighborhoodId: {
                            type: 'string',
                            format: 'uuid'
                        },
                        addressLine: {
                            minLength: 1,
                            type: 'string'
                        },
                        postalCode: {
                            type: 'string',
                            nullable: true
                        },
                        type: {
                            enum: ['UNKNOWN', 'HOME', 'WORK'],
                            type: 'string'
                        },
                        placeId: {
                            type: 'string',
                            nullable: true
                        },
                        latitude: {
                            type: 'number',
                            format: 'float',
                            nullable: true
                        },
                        longitude: {
                            type: 'number',
                            format: 'float',
                            nullable: true
                        },
                        isPrimary: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                productGroups: {
                    type: 'array',
                    items: {
                        required: ['active', 'articleCode', 'companyType', 'food', 'name', 'unitCode'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            articleCode: {
                                minLength: 1,
                                type: 'string',
                                description: 'The unique article code for the product group. This field is **required**.'
                            },
                            name: {
                                minLength: 1,
                                type: 'string',
                                description: 'The name of the product group (e.g., "Electronics", "Apparel"). This field is **required**.'
                            },
                            unitCode: {
                                enum: ['QNT', 'BAG', 'BOX'],
                                type: 'string'
                            },
                            companyType: {
                                enum: ['GOVERNMENT', 'TAXFREE', 'CUSTOMS', 'REFUNDPOINT', 'MERCHANT', 'EXCHANGE', 'TOURGUIDE'],
                                type: 'string'
                            },
                            vatId: {
                                type: 'string',
                                description: 'The unique identifier for the VAT (Value Added Tax) category applicable to this product group.',
                                format: 'uuid'
                            },
                            vatPercent: {
                                type: 'integer',
                                description: 'The percentage of VAT applied to products in this group, if applicable.',
                                format: 'int32',
                                nullable: true
                            },
                            active: {
                                type: 'boolean',
                                description: 'Indicates whether the product group is currently active. This field is **required**.'
                            },
                            food: {
                                type: 'boolean',
                                description: 'Indicates whether the product group consists of food items. This field is **required**.'
                            }
                        },
                        additionalProperties: false,
                        description: 'Represents a group of products with common characteristics, used for categorization and tax purposes.'
                    },
                    description: `A list of **product groups** that this merchant sells,
relevant for tax-free eligibility categorization.`
                }
            },
            additionalProperties: false,
            description: `Represents the detailed business information for a merchant within the tax-free system.
This DTO is used for transferring and displaying core merchant data.`
        },
        traveller: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                travellerDocumentNumber: {
                    type: 'string',
                    description: "The unique identification number from the traveller's travel document (e.g., passport number).",
                    nullable: true
                },
                countryOfResidence: {
                    type: 'string',
                    description: 'The country where the traveller permanently resides.',
                    nullable: true
                },
                nationality: {
                    type: 'string',
                    description: 'The nationality of the traveller as indicated on their travel document.',
                    nullable: true
                },
                firstname: {
                    type: 'string',
                    description: 'The first name(s) of the traveller.',
                    nullable: true
                },
                lastname: {
                    type: 'string',
                    description: 'The last name(s) or surname of the traveller.',
                    nullable: true
                }
            },
            additionalProperties: false,
            description: `Represents the personal and travel document details of a traveller.
This DTO is used to capture essential information about the individual making a tax-free purchase.`
        },
        exportValidation: {
            required: ['customsId', 'customsName', 'exportDate'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                tagId: {
                    type: 'string',
                    description: 'The unique identifier of the tax-free tag associated with the export.',
                    format: 'uuid',
                    nullable: true
                },
                tagNumber: {
                    type: 'string',
                    description: 'The readable number or code of the tax-free tag.',
                    nullable: true
                },
                customsId: {
                    type: 'string',
                    description: `The unique identifier of the customs office where the export validation occurred.
This field is **required**.`,
                    format: 'uuid'
                },
                customsName: {
                    minLength: 1,
                    type: 'string',
                    description: `The name of the customs office where the export validation occurred.
This field is **required**.`
                },
                referenceId: {
                    type: 'string',
                    description: 'An optional reference ID for the export validation, possibly from an external system.',
                    nullable: true
                },
                exportDate: {
                    type: 'string',
                    description: `The date and time when the export validation was performed.
This field is **required**.`,
                    format: 'date-time'
                },
                status: {
                    enum: ['None', 'Waiting', 'Approved', 'Rejected', 'Expired'],
                    type: 'string'
                },
                stampType: {
                    enum: ['None', 'Integration', 'DigitalStamp'],
                    type: 'string'
                },
                initialValidationResult: {
                    enum: ['None', 'Green'],
                    type: 'string'
                },
                finalValidationResult: {
                    enum: ['None', 'Green'],
                    type: 'string'
                }
            },
            additionalProperties: false,
            description: `Represents the details of an export validation process for a tax-free transaction.
This DTO captures information related to customs verification of exported goods.`
        },
        refundId: {
            type: 'string',
            description: 'The identifier of the refund associated with this tag, if available.',
            format: 'uuid',
            nullable: true
        },
        vatStatementHeaderId: {
            type: 'string',
            description: 'The identifier for the VAT statement header associated with this tag, if applicable.',
            format: 'uuid',
            nullable: true
        },
        invoices: {
            type: 'array',
            items: {
                required: ['invoiceLines', 'issueDate', 'totalAmount', 'vatAmount'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    number: {
                        type: 'string',
                        description: 'The unique identifying number of the invoice.',
                        nullable: true
                    },
                    issueDate: {
                        type: 'string',
                        description: 'The date when the invoice was issued. This field is **required**.',
                        format: 'date-time'
                    },
                    totalAmount: {
                        type: 'number',
                        description: 'The total monetary amount of the invoice, including VAT. This field is **required**.',
                        format: 'double'
                    },
                    vatAmount: {
                        type: 'number',
                        description: 'The Value Added Tax (VAT) amount included in the invoice. This field is **required**.',
                        format: 'double'
                    },
                    currency: {
                        type: 'string',
                        description: 'The currency in which the invoice amounts are denominated (e.g., "EUR", "USD").',
                        nullable: true
                    },
                    invoiceLines: {
                        type: 'array',
                        items: {
                            required: ['amount', 'taxAmount', 'taxBase', 'taxRate'],
                            type: 'object',
                            properties: {
                                id: {
                                    type: 'string',
                                    format: 'uuid'
                                },
                                productGroup: {
                                    required: ['active', 'articleCode', 'companyType', 'food', 'name', 'unitCode'],
                                    type: 'object',
                                    properties: {
                                        id: {
                                            type: 'string',
                                            format: 'uuid'
                                        },
                                        articleCode: {
                                            minLength: 1,
                                            type: 'string',
                                            description: 'The unique article code for the product group. This field is **required**.'
                                        },
                                        name: {
                                            minLength: 1,
                                            type: 'string',
                                            description: 'The name of the product group (e.g., "Electronics", "Apparel"). This field is **required**.'
                                        },
                                        unitCode: {
                                            enum: ['QNT', 'BAG', 'BOX'],
                                            type: 'string'
                                        },
                                        companyType: {
                                            enum: ['GOVERNMENT', 'TAXFREE', 'CUSTOMS', 'REFUNDPOINT', 'MERCHANT', 'EXCHANGE', 'TOURGUIDE'],
                                            type: 'string'
                                        },
                                        vatId: {
                                            type: 'string',
                                            description: 'The unique identifier for the VAT (Value Added Tax) category applicable to this product group.',
                                            format: 'uuid'
                                        },
                                        vatPercent: {
                                            type: 'integer',
                                            description: 'The percentage of VAT applied to products in this group, if applicable.',
                                            format: 'int32',
                                            nullable: true
                                        },
                                        active: {
                                            type: 'boolean',
                                            description: 'Indicates whether the product group is currently active. This field is **required**.'
                                        },
                                        food: {
                                            type: 'boolean',
                                            description: 'Indicates whether the product group consists of food items. This field is **required**.'
                                        }
                                    },
                                    additionalProperties: false,
                                    description: 'Represents a group of products with common characteristics, used for categorization and tax purposes.'
                                },
                                description: {
                                    type: 'string',
                                    description: `A description of the item in this invoice line (e.g., "Men's Leather Jacket," "Designer Watch").`,
                                    nullable: true
                                },
                                amount: {
                                    type: 'number',
                                    description: 'The total monetary amount for this specific line item, including tax. This field is **required**.',
                                    format: 'double'
                                },
                                taxRate: {
                                    type: 'number',
                                    description: 'The tax rate applied to this line item, expressed as a decimal (e.g., 0.18 for 18%). This field is **required**.',
                                    format: 'double'
                                },
                                taxAmount: {
                                    type: 'number',
                                    description: 'The calculated tax amount for this line item. This field is **required**.',
                                    format: 'double'
                                },
                                taxBase: {
                                    type: 'number',
                                    description: 'The base amount before tax for this line item. This field is **required**.',
                                    format: 'double'
                                },
                                currency: {
                                    type: 'string',
                                    description: "The currency in which this line item's amounts are denominated.",
                                    nullable: true
                                }
                            },
                            additionalProperties: false,
                            description: `Represents a single line item within an invoice.
This DTO details a specific product or service and its associated financial breakdown.`
                        },
                        description: 'A collection of individual line items included in this invoice.'
                    }
                },
                additionalProperties: false,
                description: `Represents an invoice within the tax-free system.
This DTO captures key financial details of a purchase eligible for tax refunds.`
            },
            description: 'A collection of invoices linked to this tag.',
            nullable: true
        },
        totals: {
            type: 'array',
            items: {
                required: ['amount', 'currency', 'currencyRate', 'sortIndex', 'totalType'],
                type: 'object',
                properties: {
                    totalType: {
                        enum: ['None', 'SalesAmount', 'VatAmount', 'GrossRefund', 'RefundFee', 'AgentRefundFee', 'Refund', 'EarlyRefundFee'],
                        type: 'string'
                    },
                    amount: {
                        type: 'number',
                        description: 'The monetary value of this total. This is **required**.',
                        format: 'double'
                    },
                    description: {
                        type: 'string',
                        description: 'An optional description providing more context for this total.',
                        nullable: true
                    },
                    currency: {
                        minLength: 1,
                        type: 'string',
                        description: 'The three-letter ISO currency code (e.g., "EUR" for Euro, "USD" for US Dollar) for this total. This is **required**.'
                    },
                    currencyRate: {
                        type: 'number',
                        description: 'The currency exchange rate applicable to this total, especially if converted from another currency. This is **required**.',
                        format: 'double'
                    },
                    sortIndex: {
                        type: 'integer',
                        description: 'The sort index for ordering totals, derived from the TotalType enum value. This is **required**.',
                        format: 'int32'
                    }
                },
                additionalProperties: false,
                description: `Represents a financial total associated with a tax-free tag.
This DTO captures different types of monetary amounts relevant to the tag, such as refund totals or purchase totals.`,
                'x-permissions': ['TagService.TagsNameSpace.ViewTotals']
            },
            description: 'Aggregated totals calculated for this tag.',
            nullable: true
        },
        earnings: {
            type: 'array',
            items: {
                required: ['amount', 'currency', 'currencyRate', 'earningType', 'sortIndex'],
                type: 'object',
                properties: {
                    earningType: {
                        enum: ['None', 'GrossComission', 'RedefinedGC', 'Rebate', 'NetComission'],
                        type: 'string'
                    },
                    amount: {
                        type: 'number',
                        description: 'The monetary value of this earning. This is **required**.',
                        format: 'double'
                    },
                    description: {
                        type: 'string',
                        description: 'An optional description providing more context for this earning.',
                        nullable: true
                    },
                    currency: {
                        minLength: 1,
                        type: 'string',
                        description: 'The three-letter ISO currency code (e.g., "EUR" for Euro, "USD" for US Dollar) for this earning. This is **required**.'
                    },
                    currencyRate: {
                        type: 'number',
                        description: 'The currency exchange rate applicable to this earning, especially if converted from another currency. This is **required**.',
                        format: 'double'
                    },
                    sortIndex: {
                        type: 'integer',
                        description: 'The sort index for ordering earnings, derived from the EarningType enum value. This is **required**.',
                        format: 'int32'
                    }
                },
                additionalProperties: false,
                description: `Represents an earning associated with a tax-free tag.
This DTO captures different types of monetary amounts that represent earnings or commissions related to a tax-free transaction.`,
                'x-permissions': ['TagService.TagsNameSpace.ViewEarnings']
            },
            description: 'Earnings or revenues associated with this tag.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Represents detailed information about a specific tag in the system.'
} as const;

export const $UniRefund_TagService_Tags_TagDto = {
    required: ['exportValidationExpirationDate', 'issueDate', 'status', 'tagNumber'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tagNumber: {
            minLength: 1,
            type: 'string',
            description: `The unique tag number assigned to a tax-free transaction.
Used as the primary reference for tag operations.`
        },
        status: {
            enum: ['None', 'Open', 'PreIssued', 'Issued', 'WaitingGoodsValidation', 'WaitingStampValidation', 'Declined', 'ExportValidated', 'PaymentBlocked', 'PaymentInProgress', 'PaymentProblem', 'Paid', 'Cancelled', 'Expired', 'Correction', 'OptedOut', 'EarlyPaid'],
            type: 'string'
        },
        expirationReason: {
            enum: ['ExportValidationExpirationDate', 'RefundExpirationDate', 'EarlyRefundExpirationDate'],
            type: 'string'
        },
        refundType: {
            enum: ['Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner', 'IbanTransfer'],
            type: 'string'
        },
        isEarlyRefunded: {
            type: 'boolean',
            description: 'Indicates whether the tag has been refunded before the standard period (early refund scenario).',
            nullable: true
        },
        issueDate: {
            type: 'string',
            description: `The date and time when the tag was created or issued.
Required for all legal and reporting activities.`,
            format: 'date-time'
        },
        exportValidationExpirationDate: {
            type: 'string',
            description: `The deadline for completing export validation for this tag.
Marks the last date the export operation must be confirmed.`,
            format: 'date-time'
        },
        refundExpirationDate: {
            type: 'string',
            description: `The expiration date for refund eligibility for this tag, if set.
After this date, the tag cannot be refunded.`,
            format: 'date-time',
            nullable: true
        },
        exportValidationId: {
            type: 'string',
            description: `The unique identifier linking this tag to its related export validation record.
Used for auditing and tracing export validation operations.`,
            format: 'uuid',
            nullable: true
        },
        refundId: {
            type: 'string',
            description: `The unique identifier of the refund transaction associated with this tag, if refunded.
Used to connect refund records for reconciliation and tracking.`,
            format: 'uuid',
            nullable: true
        },
        vatStatementHeaderId: {
            type: 'string',
            description: `The unique identifier of the VAT statement header associated with this tag, if applicable.
Used for VAT reporting and compliance.`,
            format: 'uuid',
            nullable: true
        },
        merchantId: {
            type: 'string',
            description: `The unique identifier of the merchant associated with this tag.
Used to link the transaction to a specific merchant entity in the system.`,
            format: 'uuid',
            nullable: true
        },
        travellerId: {
            type: 'string',
            description: `The unique identifier of the traveller (customer) associated with this tag.
Used to connect the tag with the traveller's records for eligibility and history checks.`,
            format: 'uuid',
            nullable: true
        },
        travellerDocumentId: {
            type: 'string',
            description: `The unique identifier of the travel document associated with the traveller.
Used for customs checks and traveller identification.`,
            format: 'uuid',
            nullable: true
        },
        travellerDocumentNumber: {
            type: 'string',
            description: `The travel document number (such as passport number) of the traveller.
Used for customs checks and traveller identification.`,
            nullable: true
        },
        tripId: {
            type: 'string',
            description: `The unique identifier of the trip related to this tag, if assigned.
Used for grouping transactions under a single travel itinerary.`,
            format: 'uuid',
            nullable: true
        },
        refundTableId: {
            type: 'string',
            description: 'The unique identifier of the refund calculation table associated with this tag, if used.',
            format: 'uuid',
            nullable: true
        },
        rebateTableId: {
            type: 'string',
            description: 'The unique identifier of the rebate calculation table associated with this tag, if used.',
            format: 'uuid',
            nullable: true
        },
        contractHeaderId: {
            type: 'string',
            description: 'The unique identifier of the contract header table associated with this tag',
            format: 'uuid',
            nullable: true
        },
        totals: {
            type: 'array',
            items: {
                required: ['amount', 'currency', 'currencyRate', 'sortIndex', 'totalType'],
                type: 'object',
                properties: {
                    totalType: {
                        enum: ['None', 'SalesAmount', 'VatAmount', 'GrossRefund', 'RefundFee', 'AgentRefundFee', 'Refund', 'EarlyRefundFee'],
                        type: 'string'
                    },
                    amount: {
                        type: 'number',
                        description: 'The monetary value of this total. This is **required**.',
                        format: 'double'
                    },
                    description: {
                        type: 'string',
                        description: 'An optional description providing more context for this total.',
                        nullable: true
                    },
                    currency: {
                        minLength: 1,
                        type: 'string',
                        description: 'The three-letter ISO currency code (e.g., "EUR" for Euro, "USD" for US Dollar) for this total. This is **required**.'
                    },
                    currencyRate: {
                        type: 'number',
                        description: 'The currency exchange rate applicable to this total, especially if converted from another currency. This is **required**.',
                        format: 'double'
                    },
                    sortIndex: {
                        type: 'integer',
                        description: 'The sort index for ordering totals, derived from the TotalType enum value. This is **required**.',
                        format: 'int32'
                    }
                },
                additionalProperties: false,
                description: `Represents a financial total associated with a tax-free tag.
This DTO captures different types of monetary amounts relevant to the tag, such as refund totals or purchase totals.`,
                'x-permissions': ['TagService.TagsNameSpace.ViewTotals']
            },
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Represents a tax-free shopping tag with all business-relevant details, used for tracking transactions, refunds, and related records.'
} as const;

export const $UniRefund_TagService_Tags_TagEarningDto = {
    required: ['amount', 'currency', 'currencyRate', 'earningType', 'sortIndex'],
    type: 'object',
    properties: {
        earningType: {
            enum: ['None', 'GrossComission', 'RedefinedGC', 'Rebate', 'NetComission'],
            type: 'string'
        },
        amount: {
            type: 'number',
            description: 'The monetary value of this earning. This is **required**.',
            format: 'double'
        },
        description: {
            type: 'string',
            description: 'An optional description providing more context for this earning.',
            nullable: true
        },
        currency: {
            minLength: 1,
            type: 'string',
            description: 'The three-letter ISO currency code (e.g., "EUR" for Euro, "USD" for US Dollar) for this earning. This is **required**.'
        },
        currencyRate: {
            type: 'number',
            description: 'The currency exchange rate applicable to this earning, especially if converted from another currency. This is **required**.',
            format: 'double'
        },
        sortIndex: {
            type: 'integer',
            description: 'The sort index for ordering earnings, derived from the EarningType enum value. This is **required**.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    description: `Represents an earning associated with a tax-free tag.
This DTO captures different types of monetary amounts that represent earnings or commissions related to a tax-free transaction.`,
    'x-permissions': ['TagService.TagsNameSpace.ViewEarnings']
} as const;

export const $UniRefund_TagService_Tags_TagIdAndVATStatementHeaderIdPairDto = {
    required: ['tagId', 'vatStatementHeaderId'],
    type: 'object',
    properties: {
        tagId: {
            type: 'string',
            format: 'uuid'
        },
        vatStatementHeaderId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_TagListItemDto = {
    required: ['exportValidationExpirationDate', 'id', 'issueDate', 'status', 'tagNumber', 'travellerDocumentNumber'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tagNumber: {
            minLength: 1,
            type: 'string'
        },
        issueDate: {
            type: 'string',
            format: 'date-time'
        },
        exportValidationExpirationDate: {
            type: 'string',
            format: 'date-time'
        },
        refundExpirationDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isEarlyRefunded: {
            type: 'boolean',
            nullable: true
        },
        travellerFullName: {
            type: 'string',
            nullable: true
        },
        travellerDocumentId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        travellerDocumentNumber: {
            minLength: 1,
            type: 'string'
        },
        merchantTitle: {
            type: 'string',
            nullable: true
        },
        status: {
            enum: ['None', 'Open', 'PreIssued', 'Issued', 'WaitingGoodsValidation', 'WaitingStampValidation', 'Declined', 'ExportValidated', 'PaymentBlocked', 'PaymentInProgress', 'PaymentProblem', 'Paid', 'Cancelled', 'Expired', 'Correction', 'OptedOut', 'EarlyPaid'],
            type: 'string'
        },
        expirationReason: {
            enum: ['ExportValidationExpirationDate', 'RefundExpirationDate', 'EarlyRefundExpirationDate'],
            type: 'string'
        },
        currency: {
            type: 'string',
            nullable: true
        },
        currencyRate: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        salesAmount: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        vatAmount: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        grossRefund: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        refundFee: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        agentRefundFee: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        refund: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        earlyRefundFee: {
            type: 'number',
            format: 'double',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_TagListSummaryDto = {
    required: ['currency', 'totalRefundAmount', 'totalSalesAmount'],
    type: 'object',
    properties: {
        totalSalesAmount: {
            type: 'number',
            format: 'double'
        },
        totalRefundAmount: {
            type: 'number',
            format: 'double'
        },
        currency: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_TagRefundFeesDto = {
    required: ['agentFee', 'id', 'netRefundAmount', 'touristFee'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        touristFee: {
            type: 'number',
            format: 'double'
        },
        agentFee: {
            type: 'number',
            format: 'double'
        },
        earlyRefundFee: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        netRefundAmount: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_TagStatusType = {
    enum: ['None', 'Open', 'PreIssued', 'Issued', 'WaitingGoodsValidation', 'WaitingStampValidation', 'Declined', 'ExportValidated', 'PaymentBlocked', 'PaymentInProgress', 'PaymentProblem', 'Paid', 'Cancelled', 'Expired', 'Correction', 'OptedOut', 'EarlyPaid'],
    type: 'string'
} as const;

export const $UniRefund_TagService_Tags_TagSumTagsForVATStatementTagDetailResponseDto = {
    required: ['currency', 'grandTotal', 'merchantId', 'refundAmount', 'refundDate', 'tagId', 'tagNumber', 'taxAmount'],
    type: 'object',
    properties: {
        tagId: {
            type: 'string',
            format: 'uuid'
        },
        merchantId: {
            type: 'string',
            format: 'uuid'
        },
        tagNumber: {
            minLength: 1,
            type: 'string'
        },
        refundDate: {
            type: 'string',
            format: 'date-time'
        },
        grandTotal: {
            type: 'number',
            format: 'double'
        },
        taxAmount: {
            type: 'number',
            format: 'double'
        },
        refundAmount: {
            type: 'number',
            format: 'double'
        },
        currency: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_TagTotalDto = {
    required: ['amount', 'currency', 'currencyRate', 'sortIndex', 'totalType'],
    type: 'object',
    properties: {
        totalType: {
            enum: ['None', 'SalesAmount', 'VatAmount', 'GrossRefund', 'RefundFee', 'AgentRefundFee', 'Refund', 'EarlyRefundFee'],
            type: 'string'
        },
        amount: {
            type: 'number',
            description: 'The monetary value of this total. This is **required**.',
            format: 'double'
        },
        description: {
            type: 'string',
            description: 'An optional description providing more context for this total.',
            nullable: true
        },
        currency: {
            minLength: 1,
            type: 'string',
            description: 'The three-letter ISO currency code (e.g., "EUR" for Euro, "USD" for US Dollar) for this total. This is **required**.'
        },
        currencyRate: {
            type: 'number',
            description: 'The currency exchange rate applicable to this total, especially if converted from another currency. This is **required**.',
            format: 'double'
        },
        sortIndex: {
            type: 'integer',
            description: 'The sort index for ordering totals, derived from the TotalType enum value. This is **required**.',
            format: 'int32'
        }
    },
    additionalProperties: false,
    description: `Represents a financial total associated with a tax-free tag.
This DTO captures different types of monetary amounts relevant to the tag, such as refund totals or purchase totals.`,
    'x-permissions': ['TagService.TagsNameSpace.ViewTotals']
} as const;

export const $UniRefund_TagService_Tags_TagValidForVATStatementResponseDto = {
    required: ['contractHeaderId', 'currency', 'grandTotal', 'merchantId', 'refundAmount', 'refundDate', 'tagId', 'tagNumber', 'taxAmount', 'taxBase'],
    type: 'object',
    properties: {
        tagId: {
            type: 'string',
            format: 'uuid'
        },
        merchantId: {
            type: 'string',
            format: 'uuid'
        },
        contractHeaderId: {
            type: 'string',
            format: 'uuid'
        },
        tagNumber: {
            minLength: 1,
            type: 'string'
        },
        invoiceId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        taxRate: {
            type: 'number',
            format: 'double',
            nullable: true
        },
        taxBase: {
            type: 'number',
            format: 'double'
        },
        taxAmount: {
            type: 'number',
            format: 'double'
        },
        grandTotal: {
            type: 'number',
            format: 'double'
        },
        refundDate: {
            type: 'string',
            format: 'date-time'
        },
        refundAmount: {
            type: 'number',
            format: 'double'
        },
        currency: {
            minLength: 1,
            type: 'string'
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Tags_TagsSumForRefundResponseDto = {
    type: 'object',
    properties: {
        tagRefundFees: {
            type: 'array',
            items: {
                required: ['agentFee', 'id', 'netRefundAmount', 'touristFee'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    touristFee: {
                        type: 'number',
                        format: 'double'
                    },
                    agentFee: {
                        type: 'number',
                        format: 'double'
                    },
                    earlyRefundFee: {
                        type: 'number',
                        format: 'double',
                        nullable: true
                    },
                    netRefundAmount: {
                        type: 'number',
                        format: 'double'
                    }
                },
                additionalProperties: false
            },
            description: 'Gets or sets the list of refund fees associated with the tags.',
            nullable: true
        },
        travellerId: {
            type: 'string',
            description: 'Gets or sets the unique identifier of the traveller.',
            format: 'uuid'
        },
        travellerDocumentId: {
            type: 'string',
            description: 'Gets or sets the document number of the traveller.',
            format: 'uuid'
        },
        refundCurrency: {
            type: 'string',
            description: 'Gets or sets the currency in which the refund is processed.',
            nullable: true
        },
        status: {
            enum: ['None', 'Open', 'PreIssued', 'Issued', 'WaitingGoodsValidation', 'WaitingStampValidation', 'Declined', 'ExportValidated', 'PaymentBlocked', 'PaymentInProgress', 'PaymentProblem', 'Paid', 'Cancelled', 'Expired', 'Correction', 'OptedOut', 'EarlyPaid'],
            type: 'string'
        }
    },
    additionalProperties: false,
    description: 'Data Transfer Object (DTO) for the response of summing tags.'
} as const;

export const $UniRefund_TagService_Tags_TotalType = {
    enum: ['None', 'SalesAmount', 'VatAmount', 'GrossRefund', 'RefundFee', 'AgentRefundFee', 'Refund', 'EarlyRefundFee'],
    type: 'string'
} as const;

export const $UniRefund_TagService_Tags_UpdateTagDto = {
    type: 'object',
    properties: {
        tagNumber: {
            type: 'string',
            nullable: true
        },
        refundType: {
            enum: ['Cash', 'CreditCard', 'BankTransfer', 'Wallet', 'CashViaPartner', 'IbanTransfer'],
            type: 'string'
        },
        issueDate: {
            type: 'string',
            format: 'date-time'
        },
        exportValidationExpirationDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        refundExpirationDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        exportValidationId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        refundId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        vatStatementHeaderId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        merchantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        travellerId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tripId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        refundTableId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        rebateTableId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        contractHeaderId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        totals: {
            type: 'array',
            items: {
                required: ['amount', 'currency', 'currencyRate', 'sortIndex', 'totalType'],
                type: 'object',
                properties: {
                    totalType: {
                        enum: ['None', 'SalesAmount', 'VatAmount', 'GrossRefund', 'RefundFee', 'AgentRefundFee', 'Refund', 'EarlyRefundFee'],
                        type: 'string'
                    },
                    amount: {
                        type: 'number',
                        description: 'The monetary value of this total. This is **required**.',
                        format: 'double'
                    },
                    description: {
                        type: 'string',
                        description: 'An optional description providing more context for this total.',
                        nullable: true
                    },
                    currency: {
                        minLength: 1,
                        type: 'string',
                        description: 'The three-letter ISO currency code (e.g., "EUR" for Euro, "USD" for US Dollar) for this total. This is **required**.'
                    },
                    currencyRate: {
                        type: 'number',
                        description: 'The currency exchange rate applicable to this total, especially if converted from another currency. This is **required**.',
                        format: 'double'
                    },
                    sortIndex: {
                        type: 'integer',
                        description: 'The sort index for ordering totals, derived from the TotalType enum value. This is **required**.',
                        format: 'int32'
                    }
                },
                additionalProperties: false,
                description: `Represents a financial total associated with a tax-free tag.
This DTO captures different types of monetary amounts relevant to the tag, such as refund totals or purchase totals.`,
                'x-permissions': ['TagService.TagsNameSpace.ViewTotals']
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_TagService_Travellers_TravellerDetailDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        travellerDocumentNumber: {
            type: 'string',
            description: "The unique identification number from the traveller's travel document (e.g., passport number).",
            nullable: true
        },
        countryOfResidence: {
            type: 'string',
            description: 'The country where the traveller permanently resides.',
            nullable: true
        },
        nationality: {
            type: 'string',
            description: 'The nationality of the traveller as indicated on their travel document.',
            nullable: true
        },
        firstname: {
            type: 'string',
            description: 'The first name(s) of the traveller.',
            nullable: true
        },
        lastname: {
            type: 'string',
            description: 'The last name(s) or surname of the traveller.',
            nullable: true
        }
    },
    additionalProperties: false,
    description: `Represents the personal and travel document details of a traveller.
This DTO is used to capture essential information about the individual making a tax-free purchase.`
} as const;

export const $UniRefund_TagService_Travellers_TravellerRequestDto = {
    required: ['firstName', 'lastName', 'nationalityCountryCode2', 'residenceCountryCode2', 'travellerDocumentNumber'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'The unique identifier of the traveller (optional for creation).',
            format: 'uuid',
            nullable: true
        },
        travellerDocumentNumber: {
            minLength: 1,
            type: 'string',
            description: `The travel document number (such as passport number) of the traveller.
Required for identification and document verification.`
        },
        nationalityCountryCode2: {
            minLength: 1,
            type: 'string',
            description: `The ISO 3166-1 alpha-2 country code representing the traveller's nationality (e.g., "TR" for Turkey).`
        },
        firstName: {
            minLength: 1,
            type: 'string',
            description: 'The first name or given name of the traveller.'
        },
        lastName: {
            minLength: 1,
            type: 'string',
            description: 'The last name or surname of the traveller.'
        },
        residenceCountryCode2: {
            minLength: 1,
            type: 'string',
            description: "The ISO 3166-1 alpha-2 country code representing the traveller's country of residence."
        },
        expirationDate: {
            type: 'string',
            description: 'The expiration date of the travel document (optional).',
            format: 'date-time',
            nullable: true
        },
        birthDate: {
            type: 'string',
            description: 'The birth date of the traveller (optional).',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationAuthConfigurationDto = {
    type: 'object',
    properties: {
        grantedPolicies: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationConfigurationDto = {
    type: 'object',
    properties: {
        localization: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        }
                    },
                    nullable: true
                },
                resources: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            texts: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'string'
                                },
                                nullable: true
                            },
                            baseResources: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                languages: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            cultureName: {
                                type: 'string',
                                nullable: true
                            },
                            uiCultureName: {
                                type: 'string',
                                nullable: true
                            },
                            displayName: {
                                type: 'string',
                                nullable: true
                            },
                            twoLetterISOLanguageName: {
                                type: 'string',
                                nullable: true,
                                readOnly: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                currentCulture: {
                    type: 'object',
                    properties: {
                        displayName: {
                            type: 'string',
                            nullable: true
                        },
                        englishName: {
                            type: 'string',
                            nullable: true
                        },
                        threeLetterIsoLanguageName: {
                            type: 'string',
                            nullable: true
                        },
                        twoLetterIsoLanguageName: {
                            type: 'string',
                            nullable: true
                        },
                        isRightToLeft: {
                            type: 'boolean'
                        },
                        cultureName: {
                            type: 'string',
                            nullable: true
                        },
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        nativeName: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormat: {
                            type: 'object',
                            properties: {
                                calendarAlgorithmType: {
                                    type: 'string',
                                    nullable: true
                                },
                                dateTimeFormatLong: {
                                    type: 'string',
                                    nullable: true
                                },
                                shortDatePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                fullDateTimePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                dateSeparator: {
                                    type: 'string',
                                    nullable: true
                                },
                                shortTimePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                longTimePattern: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    additionalProperties: false
                },
                defaultResourceName: {
                    type: 'string',
                    nullable: true
                },
                languagesMap: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    nullable: true
                },
                languageFilesMap: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        auth: {
            type: 'object',
            properties: {
                grantedPolicies: {
                    type: 'object',
                    additionalProperties: {
                        type: 'boolean'
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        setting: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        nullable: true
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        currentUser: {
            type: 'object',
            properties: {
                isAuthenticated: {
                    type: 'boolean'
                },
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                tenantId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorUserId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorTenantId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorUserName: {
                    type: 'string',
                    nullable: true
                },
                impersonatorTenantName: {
                    type: 'string',
                    nullable: true
                },
                userName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                surName: {
                    type: 'string',
                    nullable: true
                },
                email: {
                    type: 'string',
                    nullable: true
                },
                emailVerified: {
                    type: 'boolean'
                },
                phoneNumber: {
                    type: 'string',
                    nullable: true
                },
                phoneNumberVerified: {
                    type: 'boolean'
                },
                roles: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                },
                sessionId: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        features: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        nullable: true
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        globalFeatures: {
            type: 'object',
            properties: {
                enabledFeatures: {
                    uniqueItems: true,
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        multiTenancy: {
            type: 'object',
            properties: {
                isEnabled: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        currentTenant: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        timing: {
            type: 'object',
            properties: {
                timeZone: {
                    type: 'object',
                    properties: {
                        iana: {
                            type: 'object',
                            properties: {
                                timeZoneName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        windows: {
                            type: 'object',
                            properties: {
                                timeZoneId: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        clock: {
            type: 'object',
            properties: {
                kind: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        objectExtensions: {
            type: 'object',
            properties: {
                modules: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            entities: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'object',
                                    properties: {
                                        properties: {
                                            type: 'object',
                                            additionalProperties: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    displayName: {
                                                        type: 'object',
                                                        properties: {
                                                            name: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            resource: {
                                                                type: 'string',
                                                                nullable: true
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    api: {
                                                        type: 'object',
                                                        properties: {
                                                            onGet: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onCreate: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onUpdate: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    ui: {
                                                        type: 'object',
                                                        properties: {
                                                            onTable: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onCreateForm: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onEditForm: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            lookup: {
                                                                type: 'object',
                                                                properties: {
                                                                    url: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    resultListPropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    displayPropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    valuePropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    filterParamName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    attributes: {
                                                        type: 'array',
                                                        items: {
                                                            type: 'object',
                                                            properties: {
                                                                typeSimple: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                },
                                                                config: {
                                                                    type: 'object',
                                                                    additionalProperties: {},
                                                                    nullable: true
                                                                }
                                                            },
                                                            additionalProperties: false
                                                        },
                                                        nullable: true
                                                    },
                                                    configuration: {
                                                        type: 'object',
                                                        additionalProperties: {},
                                                        nullable: true
                                                    },
                                                    defaultValue: {
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            nullable: true
                                        },
                                        configuration: {
                                            type: 'object',
                                            additionalProperties: {},
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            },
                            configuration: {
                                type: 'object',
                                additionalProperties: {},
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                enums: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            fields: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        value: {
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            },
                            localizationResource: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationFeatureConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationGlobalFeatureConfigurationDto = {
    type: 'object',
    properties: {
        enabledFeatures: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                additionalProperties: {
                    type: 'string'
                }
            },
            nullable: true
        },
        resources: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    texts: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    baseResources: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    cultureName: {
                        type: 'string',
                        nullable: true
                    },
                    uiCultureName: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'string',
                        nullable: true
                    },
                    twoLetterISOLanguageName: {
                        type: 'string',
                        nullable: true,
                        readOnly: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        currentCulture: {
            type: 'object',
            properties: {
                displayName: {
                    type: 'string',
                    nullable: true
                },
                englishName: {
                    type: 'string',
                    nullable: true
                },
                threeLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                twoLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                isRightToLeft: {
                    type: 'boolean'
                },
                cultureName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                nativeName: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormat: {
                    type: 'object',
                    properties: {
                        calendarAlgorithmType: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormatLong: {
                            type: 'string',
                            nullable: true
                        },
                        shortDatePattern: {
                            type: 'string',
                            nullable: true
                        },
                        fullDateTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        dateSeparator: {
                            type: 'string',
                            nullable: true
                        },
                        shortTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        longTimePattern: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        defaultResourceName: {
            type: 'string',
            nullable: true
        },
        languagesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        value: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            nullable: true
        },
        languageFilesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        value: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationDto = {
    type: 'object',
    properties: {
        resources: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    texts: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    baseResources: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        currentCulture: {
            type: 'object',
            properties: {
                displayName: {
                    type: 'string',
                    nullable: true
                },
                englishName: {
                    type: 'string',
                    nullable: true
                },
                threeLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                twoLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                isRightToLeft: {
                    type: 'boolean'
                },
                cultureName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                nativeName: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormat: {
                    type: 'object',
                    properties: {
                        calendarAlgorithmType: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormatLong: {
                            type: 'string',
                            nullable: true
                        },
                        shortDatePattern: {
                            type: 'string',
                            nullable: true
                        },
                        fullDateTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        dateSeparator: {
                            type: 'string',
                            nullable: true
                        },
                        shortTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        longTimePattern: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationResourceDto = {
    type: 'object',
    properties: {
        texts: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        baseResources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationSettingConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ClockDto = {
    type: 'object',
    properties: {
        kind: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentCultureDto = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            nullable: true
        },
        englishName: {
            type: 'string',
            nullable: true
        },
        threeLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        twoLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        isRightToLeft: {
            type: 'boolean'
        },
        cultureName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        nativeName: {
            type: 'string',
            nullable: true
        },
        dateTimeFormat: {
            type: 'object',
            properties: {
                calendarAlgorithmType: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormatLong: {
                    type: 'string',
                    nullable: true
                },
                shortDatePattern: {
                    type: 'string',
                    nullable: true
                },
                fullDateTimePattern: {
                    type: 'string',
                    nullable: true
                },
                dateSeparator: {
                    type: 'string',
                    nullable: true
                },
                shortTimePattern: {
                    type: 'string',
                    nullable: true
                },
                longTimePattern: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentUserDto = {
    type: 'object',
    properties: {
        isAuthenticated: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorTenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserName: {
            type: 'string',
            nullable: true
        },
        impersonatorTenantName: {
            type: 'string',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailVerified: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberVerified: {
            type: 'boolean'
        },
        roles: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        sessionId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_DateTimeFormatDto = {
    type: 'object',
    properties: {
        calendarAlgorithmType: {
            type: 'string',
            nullable: true
        },
        dateTimeFormatLong: {
            type: 'string',
            nullable: true
        },
        shortDatePattern: {
            type: 'string',
            nullable: true
        },
        fullDateTimePattern: {
            type: 'string',
            nullable: true
        },
        dateSeparator: {
            type: 'string',
            nullable: true
        },
        shortTimePattern: {
            type: 'string',
            nullable: true
        },
        longTimePattern: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_IanaTimeZone = {
    type: 'object',
    properties: {
        timeZoneName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_EntityExtensionDto = {
    type: 'object',
    properties: {
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string',
                                nullable: true
                            },
                            resource: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    api: {
                        type: 'object',
                        properties: {
                            onGet: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onCreate: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onUpdate: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    ui: {
                        type: 'object',
                        properties: {
                            onTable: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onCreateForm: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onEditForm: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            lookup: {
                                type: 'object',
                                properties: {
                                    url: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    resultListPropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    displayPropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    valuePropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    filterParamName: {
                                        type: 'string',
                                        nullable: true
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    attributes: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                config: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumDto = {
    type: 'object',
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    value: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        localizationResource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumFieldDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiCreateDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiDto = {
    type: 'object',
    properties: {
        onGet: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onCreate: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onUpdate: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiGetDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiUpdateDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyAttributeDto = {
    type: 'object',
    properties: {
        typeSimple: {
            type: 'string',
            nullable: true
        },
        config: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyDto = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    nullable: true
                },
                resource: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        api: {
            type: 'object',
            properties: {
                onGet: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onCreate: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onUpdate: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        ui: {
            type: 'object',
            properties: {
                onTable: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onCreateForm: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onEditForm: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                lookup: {
                    type: 'object',
                    properties: {
                        url: {
                            type: 'string',
                            nullable: true
                        },
                        resultListPropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        displayPropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        valuePropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        filterParamName: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        attributes: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    config: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiDto = {
    type: 'object',
    properties: {
        onTable: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onCreateForm: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onEditForm: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        lookup: {
            type: 'object',
            properties: {
                url: {
                    type: 'string',
                    nullable: true
                },
                resultListPropertyName: {
                    type: 'string',
                    nullable: true
                },
                displayPropertyName: {
                    type: 'string',
                    nullable: true
                },
                valuePropertyName: {
                    type: 'string',
                    nullable: true
                },
                filterParamName: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiFormDto = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiLookupDto = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            nullable: true
        },
        resultListPropertyName: {
            type: 'string',
            nullable: true
        },
        displayPropertyName: {
            type: 'string',
            nullable: true
        },
        valuePropertyName: {
            type: 'string',
            nullable: true
        },
        filterParamName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiTableDto = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_LocalizableStringDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        resource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ModuleExtensionDto = {
    type: 'object',
    properties: {
        entities: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    properties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                displayName: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        resource: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                api: {
                                    type: 'object',
                                    properties: {
                                        onGet: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onCreate: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onUpdate: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                ui: {
                                    type: 'object',
                                    properties: {
                                        onTable: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onCreateForm: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onEditForm: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        lookup: {
                                            type: 'object',
                                            properties: {
                                                url: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                resultListPropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                displayPropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                valuePropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                filterParamName: {
                                                    type: 'string',
                                                    nullable: true
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                attributes: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            config: {
                                                type: 'object',
                                                additionalProperties: {},
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                configuration: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ObjectExtensionsDto = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    entities: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                properties: {
                                    type: 'object',
                                    additionalProperties: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            displayName: {
                                                type: 'object',
                                                properties: {
                                                    name: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    resource: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            api: {
                                                type: 'object',
                                                properties: {
                                                    onGet: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onCreate: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onUpdate: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            ui: {
                                                type: 'object',
                                                properties: {
                                                    onTable: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onCreateForm: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onEditForm: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    lookup: {
                                                        type: 'object',
                                                        properties: {
                                                            url: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            resultListPropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            displayPropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            valuePropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            filterParamName: {
                                                                type: 'string',
                                                                nullable: true
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            attributes: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        config: {
                                                            type: 'object',
                                                            additionalProperties: {},
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            configuration: {
                                                type: 'object',
                                                additionalProperties: {},
                                                nullable: true
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                configuration: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        enums: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    fields: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    localizationResource: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimeZone = {
    type: 'object',
    properties: {
        iana: {
            type: 'object',
            properties: {
                timeZoneName: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        windows: {
            type: 'object',
            properties: {
                timeZoneId: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimingDto = {
    type: 'object',
    properties: {
        timeZone: {
            type: 'object',
            properties: {
                iana: {
                    type: 'object',
                    properties: {
                        timeZoneName: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                },
                windows: {
                    type: 'object',
                    properties: {
                        timeZoneId: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_WindowsTimeZone = {
    type: 'object',
    properties: {
        timeZoneId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_CurrentTenantDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_MultiTenancyInfoDto = {
    type: 'object',
    properties: {
        isEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ActionApiDescriptionModel = {
    type: 'object',
    properties: {
        uniqueName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        httpMethod: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        supportedVersions: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    typeAsString: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        parameters: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    nameOnMethod: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    jsonName: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    },
                    constraintTypes: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    bindingSourceId: {
                        type: 'string',
                        nullable: true
                    },
                    descriptorName: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        returnValue: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    nullable: true
                },
                typeSimple: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        allowAnonymous: {
            type: 'boolean',
            nullable: true
        },
        implementFrom: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ApplicationApiDescriptionModel = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    rootPath: {
                        type: 'string',
                        nullable: true
                    },
                    remoteServiceName: {
                        type: 'string',
                        nullable: true
                    },
                    controllers: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                controllerName: {
                                    type: 'string',
                                    nullable: true
                                },
                                controllerGroupName: {
                                    type: 'string',
                                    nullable: true
                                },
                                isRemoteService: {
                                    type: 'boolean'
                                },
                                isIntegrationService: {
                                    type: 'boolean'
                                },
                                apiVersion: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                interfaces: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            methods: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        parametersOnMethod: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'object',
                                                                properties: {
                                                                    name: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    typeAsString: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    type: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    typeSimple: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    isOptional: {
                                                                        type: 'boolean'
                                                                    },
                                                                    defaultValue: {
                                                                        nullable: true
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            nullable: true
                                                        },
                                                        returnValue: {
                                                            type: 'object',
                                                            properties: {
                                                                type: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                },
                                                                typeSimple: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                }
                                                            },
                                                            additionalProperties: false
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                actions: {
                                    type: 'object',
                                    additionalProperties: {
                                        type: 'object',
                                        properties: {
                                            uniqueName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            httpMethod: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            url: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            supportedVersions: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                nullable: true
                                            },
                                            parametersOnMethod: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeAsString: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            parameters: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        nameOnMethod: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        jsonName: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        },
                                                        constraintTypes: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'string'
                                                            },
                                                            nullable: true
                                                        },
                                                        bindingSourceId: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        descriptorName: {
                                                            type: 'string',
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            returnValue: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            allowAnonymous: {
                                                type: 'boolean',
                                                nullable: true
                                            },
                                            implementFrom: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        types: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    baseType: {
                        type: 'string',
                        nullable: true
                    },
                    isEnum: {
                        type: 'boolean'
                    },
                    enumNames: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    enumValues: {
                        type: 'array',
                        items: {},
                        nullable: true
                    },
                    genericArguments: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    properties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                jsonName: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isRequired: {
                                    type: 'boolean'
                                },
                                minLength: {
                                    type: 'integer',
                                    format: 'int32',
                                    nullable: true
                                },
                                maxLength: {
                                    type: 'integer',
                                    format: 'int32',
                                    nullable: true
                                },
                                minimum: {
                                    type: 'string',
                                    nullable: true
                                },
                                maximum: {
                                    type: 'string',
                                    nullable: true
                                },
                                regex: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ControllerApiDescriptionModel = {
    type: 'object',
    properties: {
        controllerName: {
            type: 'string',
            nullable: true
        },
        controllerGroupName: {
            type: 'string',
            nullable: true
        },
        isRemoteService: {
            type: 'boolean'
        },
        isIntegrationService: {
            type: 'boolean'
        },
        apiVersion: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        interfaces: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    methods: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                parametersOnMethod: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeAsString: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                returnValue: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        typeSimple: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        actions: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    uniqueName: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    httpMethod: {
                        type: 'string',
                        nullable: true
                    },
                    url: {
                        type: 'string',
                        nullable: true
                    },
                    supportedVersions: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    parametersOnMethod: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeAsString: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    parameters: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                nameOnMethod: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                jsonName: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                },
                                constraintTypes: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                bindingSourceId: {
                                    type: 'string',
                                    nullable: true
                                },
                                descriptorName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    returnValue: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                nullable: true
                            },
                            typeSimple: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    allowAnonymous: {
                        type: 'boolean',
                        nullable: true
                    },
                    implementFrom: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ControllerInterfaceApiDescriptionModel = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        methods: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    parametersOnMethod: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeAsString: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    returnValue: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                nullable: true
                            },
                            typeSimple: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_InterfaceMethodApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    typeAsString: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        returnValue: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    nullable: true
                },
                typeSimple: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_MethodParameterApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        typeAsString: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ModuleApiDescriptionModel = {
    type: 'object',
    properties: {
        rootPath: {
            type: 'string',
            nullable: true
        },
        remoteServiceName: {
            type: 'string',
            nullable: true
        },
        controllers: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    controllerName: {
                        type: 'string',
                        nullable: true
                    },
                    controllerGroupName: {
                        type: 'string',
                        nullable: true
                    },
                    isRemoteService: {
                        type: 'boolean'
                    },
                    isIntegrationService: {
                        type: 'boolean'
                    },
                    apiVersion: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    interfaces: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                methods: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            parametersOnMethod: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeAsString: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            returnValue: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    actions: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                uniqueName: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                httpMethod: {
                                    type: 'string',
                                    nullable: true
                                },
                                url: {
                                    type: 'string',
                                    nullable: true
                                },
                                supportedVersions: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                parametersOnMethod: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeAsString: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                parameters: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            nameOnMethod: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            jsonName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            },
                                            constraintTypes: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                nullable: true
                                            },
                                            bindingSourceId: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            descriptorName: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                returnValue: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        typeSimple: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                allowAnonymous: {
                                    type: 'boolean',
                                    nullable: true
                                },
                                implementFrom: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ParameterApiDescriptionModel = {
    type: 'object',
    properties: {
        nameOnMethod: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        },
        constraintTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        bindingSourceId: {
            type: 'string',
            nullable: true
        },
        descriptorName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_PropertyApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isRequired: {
            type: 'boolean'
        },
        minLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        maxLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        minimum: {
            type: 'string',
            nullable: true
        },
        maximum: {
            type: 'string',
            nullable: true
        },
        regex: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ReturnValueApiDescriptionModel = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_TypeApiDescriptionModel = {
    type: 'object',
    properties: {
        baseType: {
            type: 'string',
            nullable: true
        },
        isEnum: {
            type: 'boolean'
        },
        enumNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        enumValues: {
            type: 'array',
            items: {},
            nullable: true
        },
        genericArguments: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        properties: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    jsonName: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isRequired: {
                        type: 'boolean'
                    },
                    minLength: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    maxLength: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    minimum: {
                        type: 'string',
                        nullable: true
                    },
                    maximum: {
                        type: 'string',
                        nullable: true
                    },
                    regex: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceErrorInfo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        details: {
            type: 'string',
            nullable: true
        },
        data: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        validationErrors: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    message: {
                        type: 'string',
                        nullable: true
                    },
                    members: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceErrorResponse = {
    type: 'object',
    properties: {
        error: {
            type: 'object',
            properties: {
                code: {
                    type: 'string',
                    nullable: true
                },
                message: {
                    type: 'string',
                    nullable: true
                },
                details: {
                    type: 'string',
                    nullable: true
                },
                data: {
                    type: 'object',
                    additionalProperties: {},
                    nullable: true
                },
                validationErrors: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            message: {
                                type: 'string',
                                nullable: true
                            },
                            members: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceValidationErrorInfo = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            nullable: true
        },
        members: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Localization_LanguageInfo = {
    type: 'object',
    properties: {
        cultureName: {
            type: 'string',
            nullable: true
        },
        uiCultureName: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        twoLetterISOLanguageName: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_NameValue = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;